
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'colon comma comparison cteFloat cteInt cteString divisionSign else equalSign float floatType function greaterThan id if input int intType leftBracket leftParenthesis leftSqBracket lessThan main minusSign multiplicationSign notEqual plusSign print programType return rightBracket rightParenthesis rightSqBracket semicolon then void whilePROGRAMA : programType SAVEPROGID semicolon main qpMainJump BLOQUE qpEnd\n                | programType SAVEPROGID semicolon VARS main qpMainJump BLOQUE qpEnd\n                | programType SAVEPROGID semicolon FUNCS main qpMainJump BLOQUE qpEnd\n                | programType SAVEPROGID semicolon VARS FUNCS main qpMainJump BLOQUE qpEnd\n    qpMainJump : emptyqpEnd : emptySAVEPROGID : idMOREVARS : VARS\n                | emptyVARS : TIPO VARSAUX semicolon MOREVARSVARSCOMMA : comma VARSAUX\n                 | emptyFUNCS : function FUNCTIPO SAVEFUNCID leftParenthesis FUNCPARAM rightParenthesis leftBracket qpFuncsPN5 FUNCSVARS qpFuncsPN5Pt2 qpFuncsPN6 FUNCSESTATUTOS return FUNCEXP semicolon qpFuncsPN7 PNRIGHTBTACKETFUNC MOREFUNCSMOREFUNCS : FUNCS\n                 | emptyPNRIGHTBTACKETFUNC : rightBracketSAVEFUNCID : idFUNCTIPO : TIPO\n                | voidFUNCPARAM : PARAM PARAMSCOMMAPARAMSCOMMA : comma FUNCPARAM\n                    | emptyFUNCSVARS : VARS FUNCSVARS\n                 | emptyFUNCSESTATUTOS : ESTATUTO FUNCSESTATUTOS\n                     | emptyFUNCEXP : EXPR\n               | emptyBLOQUE : leftBracket BLOQESTATUTO rightBracketBLOQESTATUTO : ESTATUTO BLOQESTATUTO\n                    | emptyTIPO : intType\n           | floatTypePARAM : TIPO idVARSAUX : VARSAUXID ARRAYDIMENSION ARRAYDIMENSION qpArrPN7 VARSCOMMAVARSAUXID : idARRAYDIMENSION : leftSqBracket qpArrPN6 qpArrPN2 qpArrPN3 intArrDim rightSqBracket\n                    | emptyqpArrPN2 : emptyqpArrPN3 : emptyqpArrPN6 : emptyqpArrPN7 : emptyintArrDim : intESTATUTO : ASSIGN\n                | PRINT\n                | COND\n                | LLAMADAVOID\n                | CICLOVARIABLE : qpExpPN1\n                | qpArrCallPN1 qpArrCallPN2 VARIABLEIDM qpArrCallPN5\n                | qpArrCallPN1 qpArrCallPN2 VARIABLEIDM qpArrCallPN4 VARIABLEIDM qpArrCallPN5qpArrCallPN1 : idqpArrCallPN2 : emptyqpArrCallPN3 : emptyqpArrCallPN4 : emptyqpArrCallPN5 : emptyVARIABLEIDM : leftSqBracket EXPR qpArrCallPN3 rightSqBracketEXPR : TERMINO MASOMENOST qpExpPN4MASOMENOST : qpExpPN3 TERMINO qpExpPN4 MASOMENOST\n                  | emptyTERMINO : FACTOR PORENTREF qpExpPN5PORENTREF : qpExpPN2 FACTOR qpExpPN5 PORENTREF\n                 | emptyFACTOR : VARIABLE\n              | leftParenthesis minusSign FACTOR qpExpPN8 rightParenthesis\n              | NUMERO\n              | leftParenthesis qpExpPN6 EXPR rightParenthesis qpExpPN7\n              | LLAMADAVARIABLEFACTOR : VARIABLEqpExpPN1 : id qpExpPN2 : multiplicationSign\n                | divisionSignqpExpPN3 : plusSign\n                | minusSignqpExpPN4 : emptyqpExpPN5 : emptyqpExpPN6 : emptyqpExpPN7 : emptyqpExpPN8 : emptyqpAssignPN1 : emptyqpInputPN1 : emptyqpPrintPN1 : emptyqpPrintPN2 : cteStringqpBoolPN1 : emptyqpBoolPN2 : emptyqpFuncsPN5 : emptyqpFuncsPN5Pt2 : emptyqpFuncsPN6 : emptyqpFuncsPN7 : emptyEXPCOMPARATIVA : EXPR qpBoolPN1 COMPARISONOP EXPR qpBoolPN2COMPARISONOP : greaterThan\n                    | lessThan\n                    | notEqual\n                    | comparisonCOND : if leftParenthesis EXPCOMPARATIVA qpCondPN1 rightParenthesis BLOQUE qpCondPN2\n            | if leftParenthesis EXPCOMPARATIVA qpCondPN1 rightParenthesis BLOQUE qpCondPN3 else BLOQUE qpCondPN2qpCondPN1 : emptyqpCondPN2 : emptyqpCondPN3 : emptyqpCicloPN1 : emptyqpCicloPN2 : emptyqpCicloPN3 : emptyqpLlamadaPN2 : emptyqpLlamadaPN3 : emptyqpLlamadaPN4 : emptyqpLlamadaPN5 : emptyqpLlamadaPN6 : emptyLLAMADA : LLAMADAID leftParenthesis qpLlamadaPN2 LLAMADAEXPR qpLlamadaPN5 rightParenthesis qpLlamadaPN6\n               | LLAMADAID leftParenthesis qpLlamadaPN2 rightParenthesis qpLlamadaPN6LLAMADAID : idLLAMADAVOID : LLAMADAID leftParenthesis qpLlamadaPN2 LLAMADAEXPR qpLlamadaPN5 rightParenthesis qpLlamadaPN6 semicolon\n               | LLAMADAID leftParenthesis qpLlamadaPN2 rightParenthesis qpLlamadaPN6 semicolonLLAMADAEXPR : EXPR qpLlamadaPN3 LLAMADAEXPRAUXLLAMADAEXPRAUX : qpLlamadaPN4 comma LLAMADAEXPR\n                      | emptyCICLO : while qpCicloPN1 leftParenthesis EXPCOMPARATIVA qpCicloPN2 rightParenthesis BLOQUE qpCicloPN3NUMERO : int\n              | floatASSIGN : VARIABLE equalSign EXPR semicolon qpAssignPN1\n              | VARIABLE equalSign INPUT semicolon qpInputPN1INPUT : inputPRINT : print leftParenthesis PRINTARGS rightParenthesis semicolonPRINTARGS : EXPR qpPrintPN1 EXPRARGSAUX\n                 | qpPrintPN2 EXPRARGSAUXEXPRARGSAUX : comma PRINTARGS\n                   | emptyempty :'
    
_lr_action_items = {'programType':([0,],[2,]),'$end':([1,24,35,36,53,55,63,73,74,75,107,],[0,-127,-1,-6,-127,-127,-29,-2,-127,-3,-4,]),'id':([2,9,11,12,21,22,23,25,29,38,40,41,42,43,44,56,57,58,63,65,66,67,68,82,89,102,103,104,106,109,118,119,121,123,124,126,128,129,130,131,132,133,138,155,157,158,159,160,169,170,174,175,176,177,178,191,192,200,203,211,212,213,221,223,227,228,229,230,231,234,236,237,238,239,241,243,245,246,247,],[4,20,-32,-33,34,-18,-19,52,-127,52,-44,-45,-46,-47,-48,-10,-8,-9,-29,95,95,95,-127,117,-127,95,-103,95,95,20,-127,-127,95,-73,-74,95,-71,-72,95,95,-77,-127,95,-127,-119,-80,-120,-81,95,-122,95,-91,-92,-93,-94,-127,-86,-127,-112,-127,-127,-24,-95,-98,95,-127,-127,-87,-23,-111,-116,-102,52,-88,-127,52,-96,-98,95,]),'semicolon':([3,4,18,19,20,30,32,50,59,76,77,83,84,85,86,87,88,90,91,92,93,95,105,108,110,120,122,125,127,134,145,148,150,152,161,162,163,164,165,166,181,182,187,190,193,194,197,199,202,208,209,210,214,215,216,217,218,220,226,232,240,247,249,250,251,],[5,-7,29,-127,-36,-127,-38,-49,-127,-127,-42,-64,118,119,-127,-121,-127,-66,-68,-117,-118,-70,-127,-35,-12,-127,-60,-127,-63,170,-127,-50,-56,-11,-58,-75,-127,-61,-76,-127,203,-107,-127,-37,-127,-127,-127,-127,-127,-51,-56,-57,-59,-62,-65,-67,-78,-109,234,-127,-108,-127,252,-27,-28,]),'main':([5,7,8,16,29,56,57,58,255,256,257,258,259,],[6,15,17,27,-127,-10,-8,-9,-127,-16,-13,-14,-15,]),'function':([5,7,29,56,57,58,255,256,],[10,10,-127,-10,-8,-9,10,-16,]),'intType':([5,10,29,56,57,58,62,115,155,191,192,212,],[11,11,11,-10,-8,-9,11,11,-127,11,-86,11,]),'floatType':([5,10,29,56,57,58,62,115,155,191,192,212,],[12,12,12,-10,-8,-9,12,12,-127,12,-86,12,]),'leftBracket':([6,13,14,15,17,26,27,28,54,113,173,207,233,],[-127,25,-5,-127,-127,25,-127,25,25,155,25,25,25,]),'void':([10,],[23,]),'leftSqBracket':([19,20,30,32,51,52,71,72,95,105,149,150,190,210,],[31,-36,31,-38,-127,-52,106,-53,-52,-127,106,-55,-37,-57,]),'comma':([19,20,30,32,50,59,76,77,81,83,86,88,90,91,92,93,95,97,98,99,105,117,120,122,125,127,135,136,146,148,150,161,162,163,164,165,166,182,183,184,187,190,193,194,197,199,205,206,208,209,210,214,215,216,217,218,220,232,240,],[-127,-36,-127,-38,-49,-127,109,-42,115,-64,-127,-127,-66,-68,-117,-118,-70,-127,138,-83,-127,-34,-127,-60,-127,-63,138,-82,-127,-50,-56,-58,-75,-127,-61,-76,-127,-107,-127,-104,-127,-37,-127,-127,-127,-127,227,-105,-51,-56,-57,-59,-62,-65,-67,-78,-109,-127,-108,]),'rightBracket':([25,37,38,39,40,41,42,43,44,63,64,118,119,157,158,159,160,170,200,203,221,223,228,234,236,237,241,245,246,252,253,254,],[-127,63,-127,-31,-44,-45,-46,-47,-48,-29,-30,-127,-127,-119,-80,-120,-81,-122,-127,-112,-95,-98,-127,-111,-116,-102,-127,-96,-98,-127,256,-89,]),'print':([25,29,38,40,41,42,43,44,56,57,58,63,118,119,155,157,158,159,160,170,191,192,200,203,211,212,213,221,223,228,229,230,231,234,236,237,238,239,241,243,245,246,],[46,-127,46,-44,-45,-46,-47,-48,-10,-8,-9,-29,-127,-127,-127,-119,-80,-120,-81,-122,-127,-86,-127,-112,-127,-127,-24,-95,-98,-127,-127,-87,-23,-111,-116,-102,46,-88,-127,46,-96,-98,]),'if':([25,29,38,40,41,42,43,44,56,57,58,63,118,119,155,157,158,159,160,170,191,192,200,203,211,212,213,221,223,228,229,230,231,234,236,237,238,239,241,243,245,246,],[47,-127,47,-44,-45,-46,-47,-48,-10,-8,-9,-29,-127,-127,-127,-119,-80,-120,-81,-122,-127,-86,-127,-112,-127,-127,-24,-95,-98,-127,-127,-87,-23,-111,-116,-102,47,-88,-127,47,-96,-98,]),'while':([25,29,38,40,41,42,43,44,56,57,58,63,118,119,155,157,158,159,160,170,191,192,200,203,211,212,213,221,223,228,229,230,231,234,236,237,238,239,241,243,245,246,],[49,-127,49,-44,-45,-46,-47,-48,-10,-8,-9,-29,-127,-127,-127,-119,-80,-120,-81,-122,-127,-86,-127,-112,-127,-127,-24,-95,-98,-127,-127,-87,-23,-111,-116,-102,49,-88,-127,49,-96,-98,]),'return':([29,40,41,42,43,44,56,57,58,63,118,119,155,157,158,159,160,170,191,192,200,203,211,212,213,221,223,228,229,230,231,234,236,237,238,239,241,242,243,244,245,246,248,],[-127,-44,-45,-46,-47,-48,-10,-8,-9,-29,-127,-127,-127,-119,-80,-120,-81,-122,-127,-86,-127,-112,-127,-127,-24,-95,-98,-127,-127,-87,-23,-111,-116,-102,-127,-88,-127,247,-127,-26,-96,-98,-25,]),'int':([31,60,61,65,66,67,68,78,79,89,102,103,104,106,111,112,121,123,124,126,128,129,130,131,132,133,138,169,174,175,176,177,178,227,247,],[-127,-127,-41,92,92,92,-127,-127,-39,-127,92,-103,92,92,154,-40,92,-73,-74,92,-71,-72,92,92,-77,-127,92,92,92,-91,-92,-93,-94,92,92,]),'leftParenthesis':([33,34,46,47,48,49,52,65,66,67,68,69,70,89,94,95,102,103,104,106,121,123,124,126,128,129,130,131,132,133,138,169,174,175,176,177,178,227,247,],[62,-17,66,67,68,-127,-110,89,89,89,-127,104,-100,-127,133,-110,89,-103,89,89,89,-73,-74,89,-71,-72,89,89,-77,-127,89,89,89,-91,-92,-93,-94,89,89,]),'equalSign':([45,50,52,105,148,150,187,208,209,210,],[65,-49,-70,-127,-50,-56,-127,-51,-56,-57,]),'multiplicationSign':([50,83,88,90,91,92,93,95,105,148,150,165,166,182,187,194,197,199,208,209,210,216,217,218,220,232,240,],[-49,-64,128,-66,-68,-117,-118,-70,-127,-50,-56,-76,-127,-107,-127,128,-127,-127,-51,-56,-57,-65,-67,-78,-109,-127,-108,]),'divisionSign':([50,83,88,90,91,92,93,95,105,148,150,165,166,182,187,194,197,199,208,209,210,216,217,218,220,232,240,],[-49,-64,129,-66,-68,-117,-118,-70,-127,-50,-56,-76,-127,-107,-127,129,-127,-127,-51,-56,-57,-65,-67,-78,-109,-127,-108,]),'plusSign':([50,83,86,88,90,91,92,93,95,105,125,127,148,150,162,163,164,165,166,182,187,193,194,197,199,208,209,210,215,216,217,218,220,232,240,],[-49,-64,123,-127,-66,-68,-117,-118,-70,-127,-127,-63,-50,-56,-75,-127,-61,-76,-127,-107,-127,123,-127,-127,-127,-51,-56,-57,-62,-65,-67,-78,-109,-127,-108,]),'minusSign':([50,83,86,88,89,90,91,92,93,95,105,125,127,148,150,162,163,164,165,166,182,187,193,194,197,199,208,209,210,215,216,217,218,220,232,240,],[-49,-64,124,-127,130,-66,-68,-117,-118,-70,-127,-127,-63,-50,-56,-75,-127,-61,-76,-127,-107,-127,124,-127,-127,-127,-51,-56,-57,-62,-65,-67,-78,-109,-127,-108,]),'rightParenthesis':([50,68,80,81,83,86,88,90,91,92,93,95,96,97,98,99,100,102,103,105,114,116,117,120,122,125,127,133,135,136,137,139,140,141,144,146,147,148,150,156,161,162,163,164,165,166,167,168,169,171,172,179,180,182,183,184,185,186,187,193,194,195,196,197,198,199,201,204,206,208,209,210,214,215,216,217,218,219,220,224,225,232,235,240,],[-49,-127,113,-127,-64,-127,-127,-66,-68,-117,-118,-70,134,-127,-127,-83,-127,145,-103,-127,-20,-22,-34,-127,-60,-127,-63,-127,-127,-82,-124,-126,173,-97,-127,-127,-127,-50,-56,-21,-58,-75,-127,-61,-76,-127,-127,197,199,-123,-125,202,-106,-107,-127,-104,207,-101,-127,-127,-127,216,-79,-127,-127,-127,-127,-113,-115,-51,-56,-57,-59,-62,-65,-67,-78,232,-109,-90,-85,-127,-114,-108,]),'greaterThan':([50,83,86,88,90,91,92,93,95,101,105,120,122,125,127,142,143,148,150,161,162,163,164,165,166,182,187,193,194,197,199,208,209,210,214,215,216,217,218,220,232,240,],[-49,-64,-127,-127,-66,-68,-117,-118,-70,-127,-127,-127,-60,-127,-63,175,-84,-50,-56,-58,-75,-127,-61,-76,-127,-107,-127,-127,-127,-127,-127,-51,-56,-57,-59,-62,-65,-67,-78,-109,-127,-108,]),'lessThan':([50,83,86,88,90,91,92,93,95,101,105,120,122,125,127,142,143,148,150,161,162,163,164,165,166,182,187,193,194,197,199,208,209,210,214,215,216,217,218,220,232,240,],[-49,-64,-127,-127,-66,-68,-117,-118,-70,-127,-127,-127,-60,-127,-63,176,-84,-50,-56,-58,-75,-127,-61,-76,-127,-107,-127,-127,-127,-127,-127,-51,-56,-57,-59,-62,-65,-67,-78,-109,-127,-108,]),'notEqual':([50,83,86,88,90,91,92,93,95,101,105,120,122,125,127,142,143,148,150,161,162,163,164,165,166,182,187,193,194,197,199,208,209,210,214,215,216,217,218,220,232,240,],[-49,-64,-127,-127,-66,-68,-117,-118,-70,-127,-127,-127,-60,-127,-63,177,-84,-50,-56,-58,-75,-127,-61,-76,-127,-107,-127,-127,-127,-127,-127,-51,-56,-57,-59,-62,-65,-67,-78,-109,-127,-108,]),'comparison':([50,83,86,88,90,91,92,93,95,101,105,120,122,125,127,142,143,148,150,161,162,163,164,165,166,182,187,193,194,197,199,208,209,210,214,215,216,217,218,220,232,240,],[-49,-64,-127,-127,-66,-68,-117,-118,-70,-127,-127,-127,-60,-127,-63,178,-84,-50,-56,-58,-75,-127,-61,-76,-127,-107,-127,-127,-127,-127,-127,-51,-56,-57,-59,-62,-65,-67,-78,-109,-127,-108,]),'rightSqBracket':([50,83,86,88,90,91,92,93,95,105,120,122,125,127,148,150,151,153,154,161,162,163,164,165,166,182,187,188,189,193,194,197,199,208,209,210,214,215,216,217,218,220,232,240,],[-49,-64,-127,-127,-66,-68,-117,-118,-70,-127,-127,-60,-127,-63,-50,-56,-127,190,-43,-58,-75,-127,-61,-76,-127,-107,-127,210,-54,-127,-127,-127,-127,-51,-56,-57,-59,-62,-65,-67,-78,-109,-127,-108,]),'else':([63,200,222,223,],[-29,-127,233,-99,]),'input':([65,],[87,]),'float':([65,66,67,68,89,102,103,104,106,121,123,124,126,128,129,130,131,132,133,138,169,174,175,176,177,178,227,247,],[93,93,93,-127,-127,93,-103,93,93,93,-73,-74,93,-71,-72,93,93,-77,-127,93,93,93,-91,-92,-93,-94,93,93,]),'cteString':([66,138,],[99,99,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAMA':([0,],[1,]),'SAVEPROGID':([2,],[3,]),'VARS':([5,29,191,212,],[7,57,212,212,]),'FUNCS':([5,7,255,],[8,16,258,]),'TIPO':([5,10,29,62,115,191,212,],[9,22,9,82,82,9,9,]),'qpMainJump':([6,15,17,27,],[13,26,28,54,]),'empty':([6,15,17,19,24,25,27,29,30,31,38,49,51,53,55,59,60,68,74,76,78,81,86,88,89,97,98,100,101,105,118,119,120,125,133,135,144,145,146,147,151,155,163,166,167,183,187,191,193,194,197,198,199,200,201,202,211,212,228,229,232,238,241,243,247,252,255,],[14,14,14,32,36,39,14,58,32,61,39,70,72,36,36,77,79,103,36,110,112,116,122,127,132,136,139,141,143,150,158,160,162,165,103,139,180,182,184,186,189,192,162,165,196,206,209,213,122,127,218,180,182,223,225,182,230,213,237,239,182,244,246,244,251,254,259,]),'VARSAUX':([9,109,],[18,152,]),'VARSAUXID':([9,109,],[19,19,]),'FUNCTIPO':([10,],[21,]),'BLOQUE':([13,26,28,54,173,207,233,],[24,53,55,74,200,228,241,]),'ARRAYDIMENSION':([19,30,],[30,59,]),'SAVEFUNCID':([21,],[33,]),'qpEnd':([24,53,55,74,],[35,73,75,107,]),'BLOQESTATUTO':([25,38,],[37,64,]),'ESTATUTO':([25,38,238,243,],[38,38,243,243,]),'ASSIGN':([25,38,238,243,],[40,40,40,40,]),'PRINT':([25,38,238,243,],[41,41,41,41,]),'COND':([25,38,238,243,],[42,42,42,42,]),'LLAMADAVOID':([25,38,238,243,],[43,43,43,43,]),'CICLO':([25,38,238,243,],[44,44,44,44,]),'VARIABLE':([25,38,65,66,67,102,104,106,121,126,130,131,138,169,174,227,238,243,247,],[45,45,83,83,83,83,83,83,83,83,83,83,83,83,83,83,45,45,83,]),'LLAMADAID':([25,38,65,66,67,102,104,106,121,126,130,131,138,169,174,227,238,243,247,],[48,48,94,94,94,94,94,94,94,94,94,94,94,94,94,94,48,48,94,]),'qpExpPN1':([25,38,65,66,67,102,104,106,121,126,130,131,138,169,174,227,238,243,247,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'qpArrCallPN1':([25,38,65,66,67,102,104,106,121,126,130,131,138,169,174,227,238,243,247,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'MOREVARS':([29,],[56,]),'qpArrPN6':([31,],[60,]),'qpCicloPN1':([49,],[69,]),'qpArrCallPN2':([51,],[71,]),'qpArrPN7':([59,],[76,]),'qpArrPN2':([60,],[78,]),'FUNCPARAM':([62,115,],[80,156,]),'PARAM':([62,115,],[81,81,]),'EXPR':([65,66,67,102,104,106,131,138,169,174,227,247,],[84,97,101,146,101,151,168,97,146,201,146,250,]),'INPUT':([65,],[85,]),'TERMINO':([65,66,67,102,104,106,121,131,138,169,174,227,247,],[86,86,86,86,86,86,163,86,86,86,86,86,86,]),'FACTOR':([65,66,67,102,104,106,121,126,130,131,138,169,174,227,247,],[88,88,88,88,88,88,88,166,167,88,88,88,88,88,88,]),'NUMERO':([65,66,67,102,104,106,121,126,130,131,138,169,174,227,247,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'LLAMADA':([65,66,67,102,104,106,121,126,130,131,138,169,174,227,247,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'PRINTARGS':([66,138,],[96,172,]),'qpPrintPN2':([66,138,],[98,98,]),'EXPCOMPARATIVA':([67,104,],[100,147,]),'qpLlamadaPN2':([68,133,],[102,169,]),'VARIABLEIDM':([71,149,],[105,187,]),'VARSCOMMA':([76,],[108,]),'qpArrPN3':([78,],[111,]),'PARAMSCOMMA':([81,],[114,]),'MASOMENOST':([86,193,],[120,214,]),'qpExpPN3':([86,193,],[121,121,]),'PORENTREF':([88,194,],[125,215,]),'qpExpPN2':([88,194,],[126,126,]),'qpExpPN6':([89,],[131,]),'qpPrintPN1':([97,],[135,]),'EXPRARGSAUX':([98,135,],[137,171,]),'qpCondPN1':([100,],[140,]),'qpBoolPN1':([101,],[142,]),'LLAMADAEXPR':([102,169,227,],[144,198,235,]),'qpArrCallPN5':([105,187,],[148,208,]),'qpArrCallPN4':([105,],[149,]),'intArrDim':([111,],[153,]),'qpAssignPN1':([118,],[157,]),'qpInputPN1':([119,],[159,]),'qpExpPN4':([120,163,],[161,193,]),'qpExpPN5':([125,166,],[164,194,]),'COMPARISONOP':([142,],[174,]),'qpLlamadaPN5':([144,198,],[179,219,]),'qpLlamadaPN6':([145,199,202,232,],[181,220,226,240,]),'qpLlamadaPN3':([146,],[183,]),'qpCicloPN2':([147,],[185,]),'qpArrCallPN3':([151,],[188,]),'qpFuncsPN5':([155,],[191,]),'qpExpPN8':([167,],[195,]),'LLAMADAEXPRAUX':([183,],[204,]),'qpLlamadaPN4':([183,],[205,]),'FUNCSVARS':([191,212,],[211,231,]),'qpExpPN7':([197,],[217,]),'qpCondPN2':([200,241,],[221,245,]),'qpCondPN3':([200,],[222,]),'qpBoolPN2':([201,],[224,]),'qpFuncsPN5Pt2':([211,],[229,]),'qpCicloPN3':([228,],[236,]),'qpFuncsPN6':([229,],[238,]),'FUNCSESTATUTOS':([238,243,],[242,248,]),'FUNCEXP':([247,],[249,]),'qpFuncsPN7':([252,],[253,]),'PNRIGHTBTACKETFUNC':([253,],[255,]),'MOREFUNCS':([255,],[257,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAMA","S'",1,None,None,None),
  ('PROGRAMA -> programType SAVEPROGID semicolon main qpMainJump BLOQUE qpEnd','PROGRAMA',7,'p_PROGRAMA','parser.py',146),
  ('PROGRAMA -> programType SAVEPROGID semicolon VARS main qpMainJump BLOQUE qpEnd','PROGRAMA',8,'p_PROGRAMA','parser.py',147),
  ('PROGRAMA -> programType SAVEPROGID semicolon FUNCS main qpMainJump BLOQUE qpEnd','PROGRAMA',8,'p_PROGRAMA','parser.py',148),
  ('PROGRAMA -> programType SAVEPROGID semicolon VARS FUNCS main qpMainJump BLOQUE qpEnd','PROGRAMA',9,'p_PROGRAMA','parser.py',149),
  ('qpMainJump -> empty','qpMainJump',1,'p_qpMainJump','parser.py',155),
  ('qpEnd -> empty','qpEnd',1,'p_qpEnd','parser.py',165),
  ('SAVEPROGID -> id','SAVEPROGID',1,'p_SAVEPROGID','parser.py',170),
  ('MOREVARS -> VARS','MOREVARS',1,'p_MOREVARS','parser.py',185),
  ('MOREVARS -> empty','MOREVARS',1,'p_MOREVARS','parser.py',186),
  ('VARS -> TIPO VARSAUX semicolon MOREVARS','VARS',4,'p_VARS','parser.py',190),
  ('VARSCOMMA -> comma VARSAUX','VARSCOMMA',2,'p_VARSCOMMA','parser.py',194),
  ('VARSCOMMA -> empty','VARSCOMMA',1,'p_VARSCOMMA','parser.py',195),
  ('FUNCS -> function FUNCTIPO SAVEFUNCID leftParenthesis FUNCPARAM rightParenthesis leftBracket qpFuncsPN5 FUNCSVARS qpFuncsPN5Pt2 qpFuncsPN6 FUNCSESTATUTOS return FUNCEXP semicolon qpFuncsPN7 PNRIGHTBTACKETFUNC MOREFUNCS','FUNCS',18,'p_FUNCS','parser.py',203),
  ('MOREFUNCS -> FUNCS','MOREFUNCS',1,'p_MOREFUNCS','parser.py',208),
  ('MOREFUNCS -> empty','MOREFUNCS',1,'p_MOREFUNCS','parser.py',209),
  ('PNRIGHTBTACKETFUNC -> rightBracket','PNRIGHTBTACKETFUNC',1,'p_PNRIGHTBTACKETFUNC','parser.py',213),
  ('SAVEFUNCID -> id','SAVEFUNCID',1,'p_SAVEFUNCID','parser.py',252),
  ('FUNCTIPO -> TIPO','FUNCTIPO',1,'p_FUNCTIPO','parser.py',275),
  ('FUNCTIPO -> void','FUNCTIPO',1,'p_FUNCTIPO','parser.py',276),
  ('FUNCPARAM -> PARAM PARAMSCOMMA','FUNCPARAM',2,'p_FUNCPARAM','parser.py',283),
  ('PARAMSCOMMA -> comma FUNCPARAM','PARAMSCOMMA',2,'p_PARAMSCOMMA','parser.py',287),
  ('PARAMSCOMMA -> empty','PARAMSCOMMA',1,'p_PARAMSCOMMA','parser.py',288),
  ('FUNCSVARS -> VARS FUNCSVARS','FUNCSVARS',2,'p_FUNCSVARS','parser.py',292),
  ('FUNCSVARS -> empty','FUNCSVARS',1,'p_FUNCSVARS','parser.py',293),
  ('FUNCSESTATUTOS -> ESTATUTO FUNCSESTATUTOS','FUNCSESTATUTOS',2,'p_FUNCSESTATUTOS','parser.py',297),
  ('FUNCSESTATUTOS -> empty','FUNCSESTATUTOS',1,'p_FUNCSESTATUTOS','parser.py',298),
  ('FUNCEXP -> EXPR','FUNCEXP',1,'p_FUNCEXP','parser.py',302),
  ('FUNCEXP -> empty','FUNCEXP',1,'p_FUNCEXP','parser.py',303),
  ('BLOQUE -> leftBracket BLOQESTATUTO rightBracket','BLOQUE',3,'p_BLOQUE','parser.py',313),
  ('BLOQESTATUTO -> ESTATUTO BLOQESTATUTO','BLOQESTATUTO',2,'p_BLOQESTATUTO','parser.py',317),
  ('BLOQESTATUTO -> empty','BLOQESTATUTO',1,'p_BLOQESTATUTO','parser.py',318),
  ('TIPO -> intType','TIPO',1,'p_TIPO','parser.py',322),
  ('TIPO -> floatType','TIPO',1,'p_TIPO','parser.py',323),
  ('PARAM -> TIPO id','PARAM',2,'p_PARAM','parser.py',329),
  ('VARSAUX -> VARSAUXID ARRAYDIMENSION ARRAYDIMENSION qpArrPN7 VARSCOMMA','VARSAUX',5,'p_VARSAUX','parser.py',355),
  ('VARSAUXID -> id','VARSAUXID',1,'p_VARSAUXID','parser.py',359),
  ('ARRAYDIMENSION -> leftSqBracket qpArrPN6 qpArrPN2 qpArrPN3 intArrDim rightSqBracket','ARRAYDIMENSION',6,'p_ARRAYDIMENSION','parser.py',408),
  ('ARRAYDIMENSION -> empty','ARRAYDIMENSION',1,'p_ARRAYDIMENSION','parser.py',409),
  ('qpArrPN2 -> empty','qpArrPN2',1,'p_qpArrPN2','parser.py',413),
  ('qpArrPN3 -> empty','qpArrPN3',1,'p_qpArrPN3','parser.py',421),
  ('qpArrPN6 -> empty','qpArrPN6',1,'p_qpArrPN6','parser.py',439),
  ('qpArrPN7 -> empty','qpArrPN7',1,'p_qpArrPN7','parser.py',444),
  ('intArrDim -> int','intArrDim',1,'p_intArrDim','parser.py',458),
  ('ESTATUTO -> ASSIGN','ESTATUTO',1,'p_ESTATUTO','parser.py',471),
  ('ESTATUTO -> PRINT','ESTATUTO',1,'p_ESTATUTO','parser.py',472),
  ('ESTATUTO -> COND','ESTATUTO',1,'p_ESTATUTO','parser.py',473),
  ('ESTATUTO -> LLAMADAVOID','ESTATUTO',1,'p_ESTATUTO','parser.py',474),
  ('ESTATUTO -> CICLO','ESTATUTO',1,'p_ESTATUTO','parser.py',475),
  ('VARIABLE -> qpExpPN1','VARIABLE',1,'p_VARIABLE','parser.py',479),
  ('VARIABLE -> qpArrCallPN1 qpArrCallPN2 VARIABLEIDM qpArrCallPN5','VARIABLE',4,'p_VARIABLE','parser.py',480),
  ('VARIABLE -> qpArrCallPN1 qpArrCallPN2 VARIABLEIDM qpArrCallPN4 VARIABLEIDM qpArrCallPN5','VARIABLE',6,'p_VARIABLE','parser.py',481),
  ('qpArrCallPN1 -> id','qpArrCallPN1',1,'p_qpArrCallPN1','parser.py',485),
  ('qpArrCallPN2 -> empty','qpArrCallPN2',1,'p_qpArrCallPN2','parser.py',502),
  ('qpArrCallPN3 -> empty','qpArrCallPN3',1,'p_qpArrCallPN3','parser.py',526),
  ('qpArrCallPN4 -> empty','qpArrCallPN4',1,'p_qpArrCallPN4','parser.py',570),
  ('qpArrCallPN5 -> empty','qpArrCallPN5',1,'p_qpArrCallPN5','parser.py',580),
  ('VARIABLEIDM -> leftSqBracket EXPR qpArrCallPN3 rightSqBracket','VARIABLEIDM',4,'p_VARIABLEIDM','parser.py',622),
  ('EXPR -> TERMINO MASOMENOST qpExpPN4','EXPR',3,'p_EXPR','parser.py',626),
  ('MASOMENOST -> qpExpPN3 TERMINO qpExpPN4 MASOMENOST','MASOMENOST',4,'p_MASOMENOST','parser.py',630),
  ('MASOMENOST -> empty','MASOMENOST',1,'p_MASOMENOST','parser.py',631),
  ('TERMINO -> FACTOR PORENTREF qpExpPN5','TERMINO',3,'p_TERMINO','parser.py',635),
  ('PORENTREF -> qpExpPN2 FACTOR qpExpPN5 PORENTREF','PORENTREF',4,'p_PORENTREF','parser.py',639),
  ('PORENTREF -> empty','PORENTREF',1,'p_PORENTREF','parser.py',640),
  ('FACTOR -> VARIABLE','FACTOR',1,'p_FACTOR','parser.py',644),
  ('FACTOR -> leftParenthesis minusSign FACTOR qpExpPN8 rightParenthesis','FACTOR',5,'p_FACTOR','parser.py',645),
  ('FACTOR -> NUMERO','FACTOR',1,'p_FACTOR','parser.py',646),
  ('FACTOR -> leftParenthesis qpExpPN6 EXPR rightParenthesis qpExpPN7','FACTOR',5,'p_FACTOR','parser.py',647),
  ('FACTOR -> LLAMADA','FACTOR',1,'p_FACTOR','parser.py',648),
  ('VARIABLEFACTOR -> VARIABLE','VARIABLEFACTOR',1,'p_VARIABLEFACTOR','parser.py',652),
  ('qpExpPN1 -> id','qpExpPN1',1,'p_qpExpPN1','parser.py',664),
  ('qpExpPN2 -> multiplicationSign','qpExpPN2',1,'p_qpExpPN2','parser.py',676),
  ('qpExpPN2 -> divisionSign','qpExpPN2',1,'p_qpExpPN2','parser.py',677),
  ('qpExpPN3 -> plusSign','qpExpPN3',1,'p_qpExpPN3','parser.py',682),
  ('qpExpPN3 -> minusSign','qpExpPN3',1,'p_qpExpPN3','parser.py',683),
  ('qpExpPN4 -> empty','qpExpPN4',1,'p_qpExpPN4','parser.py',688),
  ('qpExpPN5 -> empty','qpExpPN5',1,'p_qpExpPN5','parser.py',718),
  ('qpExpPN6 -> empty','qpExpPN6',1,'p_qpExpPN6','parser.py',749),
  ('qpExpPN7 -> empty','qpExpPN7',1,'p_qpExpPN7','parser.py',754),
  ('qpExpPN8 -> empty','qpExpPN8',1,'p_qpExpPN8','parser.py',759),
  ('qpAssignPN1 -> empty','qpAssignPN1',1,'p_qpAssignPN1','parser.py',766),
  ('qpInputPN1 -> empty','qpInputPN1',1,'p_qpInputPN1','parser.py',784),
  ('qpPrintPN1 -> empty','qpPrintPN1',1,'p_qPrintPN1','parser.py',793),
  ('qpPrintPN2 -> cteString','qpPrintPN2',1,'p_qPrintPN2','parser.py',800),
  ('qpBoolPN1 -> empty','qpBoolPN1',1,'p_qpBoolPN1','parser.py',807),
  ('qpBoolPN2 -> empty','qpBoolPN2',1,'p_qpBoolPN2','parser.py',815),
  ('qpFuncsPN5 -> empty','qpFuncsPN5',1,'p_qpFuncsPN5','parser.py',845),
  ('qpFuncsPN5Pt2 -> empty','qpFuncsPN5Pt2',1,'p_qpFuncsPN5Pt2','parser.py',856),
  ('qpFuncsPN6 -> empty','qpFuncsPN6',1,'p_qpFuncsPN6','parser.py',861),
  ('qpFuncsPN7 -> empty','qpFuncsPN7',1,'p_qpFuncsPN7','parser.py',866),
  ('EXPCOMPARATIVA -> EXPR qpBoolPN1 COMPARISONOP EXPR qpBoolPN2','EXPCOMPARATIVA',5,'p_EXPCOMPARATIVA','parser.py',876),
  ('COMPARISONOP -> greaterThan','COMPARISONOP',1,'p_COMPARISONOP','parser.py',880),
  ('COMPARISONOP -> lessThan','COMPARISONOP',1,'p_COMPARISONOP','parser.py',881),
  ('COMPARISONOP -> notEqual','COMPARISONOP',1,'p_COMPARISONOP','parser.py',882),
  ('COMPARISONOP -> comparison','COMPARISONOP',1,'p_COMPARISONOP','parser.py',883),
  ('COND -> if leftParenthesis EXPCOMPARATIVA qpCondPN1 rightParenthesis BLOQUE qpCondPN2','COND',7,'p_COND','parser.py',889),
  ('COND -> if leftParenthesis EXPCOMPARATIVA qpCondPN1 rightParenthesis BLOQUE qpCondPN3 else BLOQUE qpCondPN2','COND',10,'p_COND','parser.py',890),
  ('qpCondPN1 -> empty','qpCondPN1',1,'p_qpCondPN1','parser.py',896),
  ('qpCondPN2 -> empty','qpCondPN2',1,'p_qpCondPN2','parser.py',909),
  ('qpCondPN3 -> empty','qpCondPN3',1,'p_qpCondPN3','parser.py',916),
  ('qpCicloPN1 -> empty','qpCicloPN1',1,'p_qpCicloPN1','parser.py',926),
  ('qpCicloPN2 -> empty','qpCicloPN2',1,'p_qpCicloPN2','parser.py',931),
  ('qpCicloPN3 -> empty','qpCicloPN3',1,'p_qpCicloPN3','parser.py',942),
  ('qpLlamadaPN2 -> empty','qpLlamadaPN2',1,'p_qpLlamadaPN2','parser.py',949),
  ('qpLlamadaPN3 -> empty','qpLlamadaPN3',1,'p_qpLlamadaPN3','parser.py',960),
  ('qpLlamadaPN4 -> empty','qpLlamadaPN4',1,'p_qpLlamadaPN4','parser.py',980),
  ('qpLlamadaPN5 -> empty','qpLlamadaPN5',1,'p_qpLlamadaPN5','parser.py',986),
  ('qpLlamadaPN6 -> empty','qpLlamadaPN6',1,'p_qpLlamadaPN6','parser.py',998),
  ('LLAMADA -> LLAMADAID leftParenthesis qpLlamadaPN2 LLAMADAEXPR qpLlamadaPN5 rightParenthesis qpLlamadaPN6','LLAMADA',7,'p_LLAMADA','parser.py',1008),
  ('LLAMADA -> LLAMADAID leftParenthesis qpLlamadaPN2 rightParenthesis qpLlamadaPN6','LLAMADA',5,'p_LLAMADA','parser.py',1009),
  ('LLAMADAID -> id','LLAMADAID',1,'p_LLAMADAID','parser.py',1041),
  ('LLAMADAVOID -> LLAMADAID leftParenthesis qpLlamadaPN2 LLAMADAEXPR qpLlamadaPN5 rightParenthesis qpLlamadaPN6 semicolon','LLAMADAVOID',8,'p_LLAMADAVOID','parser.py',1056),
  ('LLAMADAVOID -> LLAMADAID leftParenthesis qpLlamadaPN2 rightParenthesis qpLlamadaPN6 semicolon','LLAMADAVOID',6,'p_LLAMADAVOID','parser.py',1057),
  ('LLAMADAEXPR -> EXPR qpLlamadaPN3 LLAMADAEXPRAUX','LLAMADAEXPR',3,'p_LLAMADAEXPR','parser.py',1061),
  ('LLAMADAEXPRAUX -> qpLlamadaPN4 comma LLAMADAEXPR','LLAMADAEXPRAUX',3,'p_LLAMADAEXPRAUX','parser.py',1065),
  ('LLAMADAEXPRAUX -> empty','LLAMADAEXPRAUX',1,'p_LLAMADAEXPRAUX','parser.py',1066),
  ('CICLO -> while qpCicloPN1 leftParenthesis EXPCOMPARATIVA qpCicloPN2 rightParenthesis BLOQUE qpCicloPN3','CICLO',8,'p_CICLO','parser.py',1070),
  ('NUMERO -> int','NUMERO',1,'p_NUMERO','parser.py',1074),
  ('NUMERO -> float','NUMERO',1,'p_NUMERO','parser.py',1075),
  ('ASSIGN -> VARIABLE equalSign EXPR semicolon qpAssignPN1','ASSIGN',5,'p_ASSIGN','parser.py',1091),
  ('ASSIGN -> VARIABLE equalSign INPUT semicolon qpInputPN1','ASSIGN',5,'p_ASSIGN','parser.py',1092),
  ('INPUT -> input','INPUT',1,'p_INPUT','parser.py',1096),
  ('PRINT -> print leftParenthesis PRINTARGS rightParenthesis semicolon','PRINT',5,'p_PRINT','parser.py',1100),
  ('PRINTARGS -> EXPR qpPrintPN1 EXPRARGSAUX','PRINTARGS',3,'p_PRINTARGS','parser.py',1104),
  ('PRINTARGS -> qpPrintPN2 EXPRARGSAUX','PRINTARGS',2,'p_PRINTARGS','parser.py',1105),
  ('EXPRARGSAUX -> comma PRINTARGS','EXPRARGSAUX',2,'p_EXPRARGSAUX','parser.py',1109),
  ('EXPRARGSAUX -> empty','EXPRARGSAUX',1,'p_EXPRARGSAUX','parser.py',1110),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',1114),
]
